---
- name: Update system packages
  apt:
    update_cache: yes
  become: true
  register: apt_update
  failed_when: apt_update is failed

- name: Install dependencies
  apt:
    name: 
      - gnupg
      - curl
      - haveged
    state: present
  become: true
  register: deps_result
  failed_when: deps_result is failed

- name: Ensure haveged is running for entropy
  service:
    name: haveged
    state: started
    enabled: yes
  become: true
  ignore_errors: yes

- name: Download MongoDB GPG key and add to keyring (one command)
  shell: |
    set -e
    curl -sL https://www.mongodb.org/static/pgp/server-7.0.asc | \
    gpg --dearmor | \
    sudo tee /usr/share/keyrings/mongodb-server-7.0.gpg > /dev/null
  args:
    creates: /usr/share/keyrings/mongodb-server-7.0.gpg
  become: true
  register: gpg_result
  failed_when: gpg_result.rc != 0
  when: ansible_distribution == "Ubuntu"

- name: Remove incorrect MongoDB repository file
  file:
    path: /etc/apt/sources.list.d/mongodb-org-7.0.list
    state: absent
  become: true

- name: Add MongoDB repository
  shell: echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu {{ ansible_distribution_release }}/mongodb-org/7.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-7.0.list
  become: true
  register: repo_result
  failed_when: repo_result.rc != 0

- name: Update package lists
  apt:
    update_cache: yes
  become: true
  register: apt_update_after_repo
  retries: 3
  delay: 5
  until: apt_update_after_repo is success

- name: Install MongoDB packages
  apt:
    name: mongodb-org
    state: present
  become: true
  register: mongodb_install
  failed_when: mongodb_install is failed

- name: Create MongoDB configuration directory
  file:
    path: "{{ mongodb_dbpath | default('/var/lib/mongodb') }}"
    state: directory
    owner: "{{ mongodb_user | default('mongodb') }}"
    group: "{{ mongodb_group | default('mongodb') }}"
    mode: 0755
    recurse: yes
  become: true

- name: Create MongoDB log directory
  file:
    path: "{{ mongodb_logpath | dirname | default('/var/log/mongodb') }}"
    state: directory
    owner: "{{ mongodb_user | default('mongodb') }}"
    group: "{{ mongodb_group | default('mongodb') }}"
    mode: 0755
  become: true

- name: Create MongoDB security directory
  file:
    path: "{{ mongodb_security_path | default('/var/lib/mongodb/security') }}"
    state: directory
    owner: "{{ mongodb_user | default('mongodb') }}"
    group: "{{ mongodb_group | default('mongodb') }}"
    mode: 0755
  become: true

- name: Create MongoDB configuration file
  template:
    src: mongod.conf.j2
    dest: /etc/mongod.conf
    owner: root
    group: root
    mode: 0644
  become: true
  notify: restart mongodb
  ignore_errors: yes

- name: Create MongoDB keyfile from base64 content
  shell: |
    set -e
    echo "{{ mongodb_keyfile }}" | base64 -d > {{ mongodb_security_path | default('/var/lib/mongodb/security') }}/keyfile
    chmod 0600 {{ mongodb_security_path | default('/var/lib/mongodb/security') }}/keyfile
    chown {{ mongodb_user | default('mongodb') }}:{{ mongodb_group | default('mongodb') }} {{ mongodb_security_path | default('/var/lib/mongodb/security') }}/keyfile
  args:
    creates: "{{ mongodb_security_path | default('/var/lib/mongodb/security') }}/keyfile"
  become: true
  when: mongodb_keyfile is defined and mongodb_keyfile | length > 0
  notify: restart mongodb

- name: Create MongoDB PEM from base64 content
  shell: |
    set -e
    echo "{{ mongodb_pem }}" | base64 -d > {{ mongodb_security_path | default('/var/lib/mongodb/security') }}/mongodb.pem
    chmod 0600 {{ mongodb_security_path | default('/var/lib/mongodb/security') }}/mongodb.pem
    chown {{ mongodb_user | default('mongodb') }}:{{ mongodb_group | default('mongodb') }} {{ mongodb_security_path | default('/var/lib/mongodb/security') }}/mongodb.pem
  args:
    creates: "{{ mongodb_security_path | default('/var/lib/mongodb/security') }}/mongodb.pem"
  become: true
  when: mongodb_pem is defined and mongodb_pem | length > 0
  notify: restart mongodb

- name: Reload systemd
  systemd:
    daemon_reload: yes
  become: true

- name: Enable and start MongoDB service
  service:
    name: mongod
    state: started
    enabled: yes
  become: true
  register: start_result
  failed_when: start_result is failed

- name: Verify MongoDB installation
  shell: mongod --version
  become: true
  register: version_check
  changed_when: false
  failed_when: false

- name: Show MongoDB verification results
  debug:
    msg: "MongoDB installation verified successfully. Version: {{ version_check.stdout_lines[0] if version_check.rc == 0 else 'MongoDB verification failed!' }}"

- name: Get MongoDB service status
  shell: systemctl status mongod
  become: true
  register: status_result
  changed_when: false
  failed_when: false

- name: Show MongoDB service status
  debug:
    msg: "{{ status_result.stdout_lines }}"