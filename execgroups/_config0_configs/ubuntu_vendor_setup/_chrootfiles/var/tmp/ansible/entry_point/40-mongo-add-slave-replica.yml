---
- name: Add Secondary Nodes to MongoDB 7.0 Replica Set
  hosts: config_network
  remote_user: "{{ os_user }}"
  become: yes
  become_method: sudo
  gather_facts: yes
  
  pre_tasks:
    - name: Wait for MongoDB to be available on all nodes
      wait_for:
        port: "{{ mongodb_port }}"
        timeout: 60
      delegate_to: "{{ item }}"
      with_items: "{{ groups['private-secondaries'] }}"
  
  roles:
    - role: ../roles/add_slaves_to_replica
  
  post_tasks:
    - name: Verify replica set members
      shell: >
        mongosh 
        --tls 
        --tlsAllowInvalidCertificates 
        --host "localhost:{{ mongodb_port }}" 
        -u "{{ mongodb_admin_user }}" 
        -p "{{ mongodb_admin_pass }}" 
        --authenticationDatabase "admin" 
        --eval "rs.status().members.map(m => ({name: m.name, state: m.stateStr}))"
      register: rs_members
      changed_when: false
      
    - name: Display replica set members
      debug:
        var: rs_members.stdout_lines
        
    - name: Wait for secondary nodes to come online (up to 2 minutes)
      shell: >
        mongosh 
        --tls 
        --tlsAllowInvalidCertificates 
        --host "localhost:{{ mongodb_port }}" 
        -u "{{ mongodb_admin_user }}" 
        -p "{{ mongodb_admin_pass }}" 
        --authenticationDatabase "admin" 
        --eval "
          const status = rs.status();
          const members = status.members;
          const secondaries = members.filter(m => m.stateStr === 'SECONDARY');
          const unhealthy = members.filter(m => !['PRIMARY', 'SECONDARY'].includes(m.stateStr));
          
          if (secondaries.length < {{ groups['private-secondaries'] | length }}) {
            print('Not all secondary nodes are online. Expected: {{ groups['private-secondaries'] | length }}, Got: ' + secondaries.length);
            print('Current states: ' + JSON.stringify(members.map(m => ({name: m.name, state: m.stateStr}))));
            quit(1);
          } else if (unhealthy.length > 0) {
            print('Some nodes are in unhealthy states: ' + JSON.stringify(unhealthy.map(m => ({name: m.name, state: m.stateStr}))));
            quit(1);
          } else {
            print('All nodes are healthy. PRIMARY: ' + members.filter(m => m.stateStr === 'PRIMARY').length + 
                  ', SECONDARY: ' + secondaries.length);
            quit(0);
          }"
      register: health_check
      until: health_check.rc == 0
      retries: 24
      delay: 5
      changed_when: false
      
    - name: Verify replication is working with authentication
      shell: |
        mongosh \
        --tls \
        --tlsAllowInvalidCertificates \
        --host "localhost:{{ mongodb_port }}" \
        -u "{{ mongodb_admin_user }}" \
        -p "{{ mongodb_admin_pass }}" \
        --authenticationDatabase "admin" \
        --eval '
          // Create a test collection and insert a document
          db.getSiblingDB("admin").getCollection("repl_test").insertOne({test: "data", timestamp: new Date()});
          
          // Wait briefly for replication to occur
          sleep(2000);
          
          // Get list of secondary hosts
          const status = rs.status();
          const secondaryHosts = status.members
            .filter(m => m.stateStr === "SECONDARY")
            .map(m => m.name);
          
          // Test replication on each secondary
          const results = [];
          secondaryHosts.forEach(host => {
            try {
              // Include authentication in the connection string
              const connStr = "mongodb://{{ mongodb_admin_user }}:{{ mongodb_admin_pass }}@" + host + 
                              "/?tls=true&tlsAllowInvalidCertificates=true&authSource=admin";
              const conn = new Mongo(connStr);
              conn.setReadPref("secondary");
              const count = conn.getDB("admin").repl_test.countDocuments();
              results.push({host: host, success: count > 0, count: count});
            } catch (e) {
              results.push({host: host, success: false, error: e.toString()});
            }
          });
          
          // Clean up test collection
          db.getSiblingDB("admin").getCollection("repl_test").drop();
          
          // Evaluate success
          const failed = results.filter(r => !r.success);
          if (failed.length > 0) {
            print("Replication verification failed for some nodes: " + JSON.stringify(failed));
            quit(1);
          } else {
            print("Replication verification successful for all nodes: " + JSON.stringify(results));
            quit(0);
          }
        '
      register: repl_test
      changed_when: false
      failed_when: repl_test.rc != 0
      
    - name: Get final replica set status
      shell: |
        mongosh \
        --tls \
        --tlsAllowInvalidCertificates \
        --host "localhost:{{ mongodb_port }}" \
        -u "{{ mongodb_admin_user }}" \
        -p "{{ mongodb_admin_pass }}" \
        --authenticationDatabase "admin" \
        --eval '
          const status = rs.status();
          const configVersion = rs.conf().version;
          
          print("==== Replica Set Status Summary ====");
          print("Config version: " + configVersion);
          print("Members:");
          status.members.forEach(m => {
            print("  - " + m.name + ": " + m.stateStr + 
                  ", health: " + (m.health ? "UP" : "DOWN") + 
                  ", uptime: " + m.uptime + "s" +
                  (m.syncingTo ? ", syncing to: " + m.syncingTo : ""));
          });
          
          // Get oplog window size
          const oplogInfo = db.getSiblingDB("local").oplog.rs.stats();
          print("Oplog window: " + (oplogInfo.maxSize / (1024 * 1024)) + "MB");
          
          // Check for replication lag
          const primary = status.members.find(m => m.stateStr === "PRIMARY");
          const secondaries = status.members.filter(m => m.stateStr === "SECONDARY");
          
          // Calculate replication lag
          const replicationStatus = secondaries.map(s => {
            const lagSeconds = (primary.optimeDate.getTime() - s.optimeDate.getTime()) / 1000;
            return {
              name: s.name,
              lagSeconds: lagSeconds,
              isHealthy: lagSeconds < 10 // Consider lag under 10 seconds as healthy
            };
          });
          
          print("Replication lag status: " + JSON.stringify(replicationStatus));
          
          // Print success message
          print("Replica set is correctly configured and operational!");
        '
      register: rs_final_status
      changed_when: false
      
    - name: Display final replica set status
      debug:
        var: rs_final_status.stdout_lines
  
  tags:
    - mongodb_repl
    - add_secondaries